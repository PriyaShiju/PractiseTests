// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PractiseTests.Data;

#nullable disable

namespace PractiseTests.Migrations
{
    [DbContext(typeof(CertificationDbContext))]
    partial class CertificationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PractiseTests.Areas.Identity.Data.PractiseTestsUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("PractiseTests.Data.Entities.Certifications", b =>
                {
                    b.Property<int>("CertificationTestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CertificationTestId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CertificationDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CertificationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoTestPapers")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Questions")
                        .HasColumnType("int");

                    b.HasKey("CertificationTestId");

                    b.ToTable("Certifications");

                    b.HasData(
                        new
                        {
                            CertificationTestId = 2,
                            Active = true,
                            CertificationDescription = "DevOps Foundation",
                            CertificationName = "DevOps Foundation",
                            FileName = "devopsfoundation.png",
                            NoTestPapers = 6,
                            Price = 20m,
                            Questions = 30
                        },
                        new
                        {
                            CertificationTestId = 3,
                            Active = true,
                            CertificationDescription = "DevOps Leader",
                            CertificationName = "DevOps Leader",
                            FileName = "DevOpsLeader.png",
                            NoTestPapers = 6,
                            Price = 25m,
                            Questions = 30
                        },
                        new
                        {
                            CertificationTestId = 4,
                            Active = true,
                            CertificationDescription = "DevSecOps Foundation",
                            CertificationName = "DevSecOps Foundation",
                            FileName = "DevSecOps.png",
                            NoTestPapers = 6,
                            Price = 20m,
                            Questions = 30
                        },
                        new
                        {
                            CertificationTestId = 5,
                            Active = true,
                            CertificationDescription = "DevSecOps Practioner",
                            CertificationName = "DevSecOps Practioner",
                            FileName = "devsecopspract.png",
                            NoTestPapers = 6,
                            Price = 25m,
                            Questions = 30
                        });
                });

            modelBuilder.Entity("PractiseTests.Data.Entities.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactId"));

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("PractiseTests.Data.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<string>("Active")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            Active = "Y",
                            OrderDate = new DateTime(2023, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderNo = "C001"
                        });
                });

            modelBuilder.Entity("PractiseTests.Data.Entities.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"));

                    b.Property<string>("CategoryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderItemId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            OrderItemId = 1,
                            CategoryCode = "C",
                            OrderId = 1,
                            ProductId = 1,
                            Quantity = 2,
                            TotPrice = 0m
                        },
                        new
                        {
                            OrderItemId = 2,
                            CategoryCode = "C",
                            OrderId = 1,
                            ProductId = 2,
                            Quantity = 2,
                            TotPrice = 0m
                        });
                });

            modelBuilder.Entity("PractiseTests.Data.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("CategoryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryCode = "C",
                            Description = "DevOps Foundation",
                            Name = "DevOps Foundation",
                            Price = 20m
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryCode = "C",
                            Description = "DevOps Leader",
                            Name = "DevOps Leader",
                            Price = 25m
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryCode = "C",
                            Description = "DevOps Foundation",
                            Name = "DevSecOps Foundation",
                            Price = 20m
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryCode = "C",
                            Description = "DevOps Leader",
                            Name = "DevSecOps Practioner",
                            Price = 25m
                        });
                });

            modelBuilder.Entity("PractiseTests.Data.Entities.ProductCategory", b =>
                {
                    b.Property<int>("ProdCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProdCategoryId"));

                    b.Property<string>("CategoryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProdCategoryId");

                    b.ToTable("ProductCategory");

                    b.HasData(
                        new
                        {
                            ProdCategoryId = 1,
                            CategoryCode = "C",
                            CategoryName = "Certification"
                        });
                });

            modelBuilder.Entity("PractiseTests.Data.Entities.TestPaper", b =>
                {
                    b.Property<int>("TestPaperId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestPaperId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Answer1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CertificationTestId")
                        .HasColumnType("int");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionNo")
                        .HasColumnType("int");

                    b.Property<string>("TestPaperName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TestPaperId");

                    b.ToTable("TestPapers");

                    b.HasData(
                        new
                        {
                            TestPaperId = 2,
                            Active = false,
                            Answer1 = "A. Methodology for identifying and removing constraints",
                            Answer2 = "B. The key principles of DevOps",
                            Answer3 = "C. Disciplined, data-driven approach for reducing waste ",
                            Answer4 = "D. A methodology for performing continuous improvement ",
                            CertificationTestId = 2,
                            CorrectAnswer = "B",
                            Question = "What is the Three Ways?",
                            QuestionNo = 1,
                            TestPaperName = "TestPaper-1"
                        },
                        new
                        {
                            TestPaperId = 3,
                            Active = false,
                            Answer1 = "A. Pushes work through a process ",
                            Answer2 = "B. Requires a workflow management tool ",
                            Answer3 = "C. Pulls work through a process ",
                            Answer4 = "D. Enables more work in progress ",
                            CertificationTestId = 2,
                            CorrectAnswer = "C",
                            Question = "Which statement about Kanban is CORRECT?",
                            QuestionNo = 2,
                            TestPaperName = "TestPaper-1"
                        },
                        new
                        {
                            TestPaperId = 4,
                            Active = false,
                            Answer1 = "A. Aggressive resistance",
                            Answer2 = "B. Apathy ",
                            Answer3 = "C. Finger pointing ",
                            Answer4 = "D. Exhaustion ",
                            CertificationTestId = 2,
                            CorrectAnswer = "B",
                            Question = "Which statement BEST describes change fatigue? ",
                            QuestionNo = 1,
                            TestPaperName = "TestPaper-2"
                        },
                        new
                        {
                            TestPaperId = 5,
                            Active = true,
                            Answer1 = "A. QA testers ",
                            Answer2 = "B. Support professionals ",
                            Answer3 = "C. Suppliers ",
                            Answer4 = "D. All of the above ",
                            CertificationTestId = 2,
                            CorrectAnswer = "D",
                            Question = "Which of the following roles are DevOps stakeholders? ",
                            QuestionNo = 1,
                            TestPaperName = "TestPaper-1"
                        },
                        new
                        {
                            TestPaperId = 6,
                            Active = false,
                            Answer1 = "A. QA testers ",
                            Answer2 = "B. Support professionals ",
                            Answer3 = "C. Suppliers ",
                            Answer4 = "D. All of the above ",
                            CertificationTestId = 3,
                            CorrectAnswer = "D",
                            Question = "Which of the following roles are DevOps stakeholders? ",
                            QuestionNo = 1,
                            TestPaperName = "TestPaper-1"
                        },
                        new
                        {
                            TestPaperId = 7,
                            Active = true,
                            Answer1 = "A. QA testers ",
                            Answer2 = "B. Support professionals ",
                            Answer3 = "C. Suppliers ",
                            Answer4 = "D. All of the above ",
                            CertificationTestId = 3,
                            CorrectAnswer = "D",
                            Question = "Which of the following roles are DevOps stakeholders? ",
                            QuestionNo = 1,
                            TestPaperName = "TestPaper-1"
                        },
                        new
                        {
                            TestPaperId = 8,
                            Active = true,
                            Answer1 = "A. QA testers ",
                            Answer2 = "B. Support professionals ",
                            Answer3 = "C. Suppliers ",
                            Answer4 = "D. All of the above ",
                            CertificationTestId = 3,
                            CorrectAnswer = "D",
                            Question = "Which of the following roles are DevOps stakeholders? ",
                            QuestionNo = 1,
                            TestPaperName = "TestPaper-2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PractiseTests.Areas.Identity.Data.PractiseTestsUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PractiseTests.Areas.Identity.Data.PractiseTestsUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PractiseTests.Areas.Identity.Data.PractiseTestsUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PractiseTests.Areas.Identity.Data.PractiseTestsUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PractiseTests.Data.Entities.Order", b =>
                {
                    b.HasOne("PractiseTests.Areas.Identity.Data.PractiseTestsUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
